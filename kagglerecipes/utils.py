# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_utils.ipynb (unless otherwise specified).

__all__ = ['log_datadir_as_artifact', 'get_dicom_metadata']

# Cell
import os
import wandb
import numpy as np
import pandas as pd
from pathlib import Path
import matplotlib.pyplot as plt

# pydicom related imports
import pydicom
from pydicom.pixel_data_handlers.util import apply_voi_lut

# Cell
def log_datadir_as_artifact(wandb_run, path_to_dir, artifact_name, artifact_type='dataset'):
    """
    Logs a data directory as an artifact in wandb.
    wandb_run: wandb.Run object
    path_to_dir: path to the data directory
    artifact_name: name of the artifact
    artifact_type: type of the artifact
    """

    artifact = wandb.Artifact(artifact_name, type=artifact_type)
    artifact.add_dir(path_to_dir)
    wandb_run.log_artifact(artifact)


# Cell
def get_dicom_metadata(path_to_dicom_file, meta_cols):
    """
    Returns the metadata of a dicom file as a dictionary.
    path_to_dicom_file: path to the dicom file
    meta_cols: list of metadata columns in the dicom file
    """
    dicom_object = pydicom.dcmread(path_to_dicom_file)

    col_dict_train = {col: [] for col in meta_cols}
    for col in meta_cols:
        try:
            col_dict_train[col].append(str(getattr(dicom_object, col)))
        except AttributeError:
            col_dict_train[col].append("NaN")

    return col_dict_train
